# frontend_import_strategy.py
import os, json, datetime
import streamlit as st
from dotenv import load_dotenv
from streamlit_autorefresh import st_autorefresh
load_dotenv()
# Map Streamlit Cloud secrets to environment variables (needed by backend)
if hasattr(st, "secrets"):
    for k, v in st.secrets.items():
        os.environ.setdefault(str(k), str(v))

import backend_oil_import_optimizer as be



st.set_page_config(page_title="AI-Powered Oil Import Optimizer (India)", layout="wide")

# --- Auto refresh (every N ms) ---
refresh_ms = int(os.getenv("AUTO_REFRESH_MS", "60000"))
st_autorefresh(interval=refresh_ms, key="data_refresh")

# --- Sidebar controls ---
st.sidebar.title("Scenario Controls (Live)")
tariff_rate = st.sidebar.slider("Tariff shock (crude surcharge proxy)", 0.0, 0.25, 0.10, 0.01, format="%.2f")
demand_bpd = st.sidebar.number_input("Daily import demand (bbl/day)", 200_000, 10_000_000, 4_500_000, 50_000)
max_supplier_share = st.sidebar.slider("Max share per supplier", 0.10, 1.00, 0.45, 0.05)
min_non_russia_share = st.sidebar.slider("Minimum non-Russia share", 0.0, 1.0, 0.55, 0.05)
selected_port = st.sidebar.selectbox("Destination port (India)", ["India-Mundra","India-JNPT","India-Paradip"])
objective = st.sidebar.selectbox("Optimizer objective", ["hybrid","cost","risk"])

st.sidebar.caption(
    "Live: Brent via yfinance; Dubai via IMF PCPS; Urals via TradingEconomics (if key). "
    "Headlines sentiment via RSS. GenAI via OpenAI if OPENAI_API_KEY is set."
)

# --- Run backend ---
result = be.run_full_pipeline(
    tariff_rate=tariff_rate,
    demand_bpd=demand_bpd,
    max_supplier_share=max_supplier_share,
    min_non_russia_share=min_non_russia_share,
    selected_indian_port=selected_port,
    optimizer_objective=objective
)
sc = result["scenario"]
quotes = result["quotes"]
mix = result["mix"]
metrics = result["metrics"]
bench = result["live_benchmarks"]
sentiment = result["news_sentiment"]
headlines = result["headlines"]
advisory = result["advisory"]
used_llm = result["advisory_used_llm"]

tabs = st.tabs([
    "Overview",
    "Inputs & Assumptions",
    "Tariff & Landed Cost",
    "Supplier Mix Optimizer",
    "Geopolitical Risk (Live Feeds)",
    "Logistics Route & Time",
    "Sustainability & ESG",
    "GenAI Trade Advisor",
    "Export Summary"
])

# --- Overview ---
with tabs[0]:
    st.markdown("## AI-Powered Oil Import Optimizer for India")
    st.markdown("> **Tagline:** Helping India navigate tariffs, geopolitics, and energy security with AI.")
    st.write("""
**What’s real-time here?**
- **Benchmarks:** Brent via yfinance (intraday); **Dubai** via IMF PCPS (monthly); **Urals** via TradingEconomics (if key), else Brent−spread.
- **Sentiment:** Headlines from RSS feeds with keyword scorer.
- **GenAI:** If `OPENAI_API_KEY` is set, advisory is generated by OpenAI; else offline template.

**Tabs & Formulas**
- **Inputs & Assumptions** – Raw Price = Benchmark + Supplier Adj (+ jitter). Insurance = Price × 0.25%. Freight = Base + (Per 1000nm × Distance).  
- **Tariff & Landed Cost** – Tariff = Price × TariffRate; Landed = Price + Tariff + Freight + Handling + Insurance.  
- **Supplier Mix Optimizer** – Grid-search with constraints: share≤cap, Non-Russia≥min. Objective = cost/risk/hybrid.  
- **Geopolitical Risk** – Sentiment ∈ [−1,+1] from headlines; Adjusted Stability = ESG + 10×Sentiment (clamped).  
- **Logistics** – Distance = Haversine (nm); Time (days) = Distance/(knots×24).  
- **Sustainability & ESG** – Weighted Carbon/ESG = Σ Share_i × Metric_i.  
- **GenAI Advisor** – LLM-based policy brief (if enabled) grounded on current scenario & mix.
    """)
    live_msg = "✅ OpenAI advisory enabled" if used_llm else "⌛ Offline template (no OPENAI_API_KEY or API error)"
    st.info(f"Live status — Benchmarks: {bench} | Sentiment: {sentiment:+.2f} | {live_msg}")

# --- Inputs & Assumptions ---
with tabs[1]:
    st.subheader("Live Benchmarks & Supplier Adjustments")
    st.json({"Live Benchmarks (USD/bbl)": bench})
    rows = []
    for s in be.SUPPLIERS:
        bmk = be.SUPPLIER_BENCHMARK[s]
        base = bench.get(bmk)
        adj = be.SUPPLIER_PRICE_ADJ[s]
        rows.append({"Supplier": s, "Benchmark": bmk, "Benchmark Price": round(base,2), "Supplier Adj (USD/bbl)": adj})
    st.dataframe(rows, use_container_width=True)

    st.write("**Freight & Other Assumptions** (per barrel)")
    st.json({
        "Freight Base": be.DEFAULT_FREIGHT_BASE,
        "Freight per 1000nm": be.DEFAULT_FREIGHT_PER_1000NM,
        "Handling": be.DEFAULT_HANDLING,
        "Insurance Rate": be.DEFAULT_INSURANCE_RATE,
        "Destination Port": selected_port,
    }, expanded=False)

# --- Tariff & Landed Cost ---
with tabs[2]:
    st.subheader("Per-Supplier Landed Cost (USD/bbl)")
    rows = []
    for s, q in quotes.items():
        rows.append({
            "Supplier": s, "Benchmark": q.benchmark,
            "Raw Price": round(q.raw_price,2), "Tariff": round(q.tariff_component,2),
            "Freight": round(q.freight,2), "Handling": round(q.handling,2),
            "Insurance": round(q.insurance,2), "Landed Cost": round(q.landed_cost,2)
        })
    st.dataframe(rows, use_container_width=True)
    st.caption("Landed = Raw + Tariff + Freight + Handling + Insurance")

# --- Supplier Mix Optimizer ---
with tabs[3]:
    st.subheader("Optimized Supplier Mix")
    mix_rows = []
    for s in be.SUPPLIERS:
        mix_rows.append({
            "Supplier": s, "Share %": round(100*mix.get(s,0.0),1),
            "Landed (USD/bbl)": round(quotes[s].landed_cost,2),
            "Carbon (kgCO2e/bbl)": quotes[s].carbon_intensity, "ESG": quotes[s].esg
        })
    st.dataframe(mix_rows, use_container_width=True)
    c1,c2,c3 = st.columns(3)
    c1.metric("Weighted Landed Cost", f"${metrics['weighted_landed_cost_usd_bbl']:.2f}/bbl")
    c2.metric("Weighted Carbon", f"{metrics['weighted_carbon_kgco2e_bbl']:.1f} kgCO2e/bbl")
    c3.metric("Weighted ESG", f"{metrics['weighted_esg']:.0f}")
    st.caption("Constraints: sum=100%, share≤cap, Non-Russia≥threshold. 5% grid granularity.")

# --- Geopolitical Risk (Live Feeds) ---
with tabs[4]:
    st.subheader("Headline Sentiment (RSS)")
    st.write(f"**Avg Sentiment:** {sentiment:+.2f} (−1..+1). Adjusted Stability = ESG + 10×Sentiment.")
    if headlines:
        st.write("Latest headlines (sample):")
        st.write("\n".join([f"- {h}" for h in headlines[:10]]))
    else:
        st.warning("No headlines fetched (offline or feed blocked). Using neutral sentiment.")

    adj_rows = []
    for s in be.SUPPLIERS:
        base = be.ESG_SCORE[s]
        adj  = be.risk_score_from_sentiment(base, sentiment)
        adj_rows.append({"Supplier": s, "Base ESG": base, "Adjusted Stability": round(adj,1)})
    st.dataframe(adj_rows, use_container_width=True)

# --- Logistics ---
with tabs[5]:
    st.subheader("Distance & Sailing Time")
    speed_knots = st.slider("Assumed vessel speed (knots)", 10.0, 20.0, 14.0, 0.5)
    rows = []
    for s in be.SUPPLIERS:
        d_nm, days = be.shipping_time_days(s, selected_port, speed_knots)
        rows.append({"Supplier": s, "Route": f"{be.supplier_port(s)} → {selected_port}", "Distance (nm)": int(d_nm), "Time (days)": round(days,1)})
    st.dataframe(rows, use_container_width=True)
    st.caption("Time = Distance/(knots×24).")

# --- Sustainability & ESG ---
with tabs[6]:
    st.subheader("Sustainability Overview of the Chosen Mix")
    st.markdown(f"- **Weighted Carbon**: **{metrics['weighted_carbon_kgco2e_bbl']:.1f} kgCO2e/bbl**")
    st.markdown(f"- **Weighted ESG**: **{metrics['weighted_esg']:.0f}**")
    rows = []
    for s in be.SUPPLIERS:
        rows.append({"Supplier": s, "Share %": round(100*mix.get(s,0.0),1), "Carbon": be.CARBON_INTENSITY[s], "ESG": be.ESG_SCORE[s]})
    st.dataframe(rows, use_container_width=True)
    st.caption("Weighted metrics = Σ Share_i × Metric_i")

# --- GenAI Trade Advisor ---
with tabs[7]:
    st.subheader("GenAI Policy Brief")
    if used_llm:
        st.success("Generated using OpenAI (set OPENAI_API_KEY / OPENAI_MODEL).")
    else:
        st.info("Offline template (enable OPENAI_API_KEY for live GenAI).")
    st.write(advisory)

# --- Export Summary ---
with tabs[8]:
    st.subheader("Export Summary")
    summary = {
        "timestamp": datetime.datetime.now().isoformat(),
        "benchmarks_usd_bbl": bench,
        "scenario": {
            "tariff_rate": tariff_rate, "demand_bpd": demand_bpd,
            "max_supplier_share": max_supplier_share,
            "min_non_russia_share": min_non_russia_share,
            "destination_port": selected_port, "objective": objective
        },
        "weighted_metrics": metrics,
        "top_mix": sorted(mix.items(), key=lambda x: x[1], reverse=True),
        "sentiment": sentiment,
        "advisory_used_llm": used_llm,
        "advisory": advisory,
    }
    txt = json.dumps(summary, indent=2)
    st.download_button("Download Summary (.txt)", data=txt.encode("utf-8"),
                       file_name="oil_import_optimizer_summary.txt", mime="text/plain")
    st.caption("Attach this to your hackathon deck.")
